# Specify the file paths
image_attribute_labels_file = '/expanse/lustre/projects/ddp390/akulkarni/datasets/CUB_200_2011/attributes/image_attribute_labels.txt'
attribute_names_file = '/expanse/lustre/projects/ddp390/akulkarni/datasets/CUB_200_2011/attributes/attributes.txt'

# Generated by GPT4

# Load the attribute names
def load_attribute_names(file_path):
    attribute_names = {}
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.strip().split()
            attribute_id = int(parts[0])
            attribute_name = parts[1]
            attribute_names[attribute_id] = attribute_name
    return attribute_names

# Load image attribute labels and count occurrences
def load_image_attribute_labels(file_path):
    image_attributes = {}
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.strip().split()
            image_id = int(parts[0])
            attribute_id = int(parts[1])
            is_present = int(parts[2])

            # If the attribute is present, count it
            if is_present == 1:
                if attribute_id not in image_attributes:
                    image_attributes[attribute_id] = set()
                image_attributes[attribute_id].add(image_id)
    return image_attributes

# Main function to calculate the presence ratio
def calculate_attribute_presence(attribute_names_file, image_attribute_labels_file):
    # Load the attribute names
    attribute_names = load_attribute_names(attribute_names_file)
    
    # Load image attribute labels
    image_attributes = load_image_attribute_labels(image_attribute_labels_file)
    
    # Calculate the total number of images
    total_images = len(set.union(*image_attributes.values()))
    
    # Calculate the ratio for each attribute
    attribute_ratios = {}
    for attribute_id, image_set in image_attributes.items():
        attribute_name = attribute_names.get(attribute_id, f"Unknown_{attribute_id}")
        presence_ratio = len(image_set) / total_images
        attribute_ratios[attribute_id] = (attribute_name, presence_ratio)
    
    return attribute_ratios

# Calculate the attribute presence ratios
attribute_ratios = calculate_attribute_presence(attribute_names_file, image_attribute_labels_file)

# Sort attributes by their balancedness (closest to 50%)
sorted_attributes = sorted(attribute_ratios.items(), key=lambda x: abs(0.5 - x[1][1]))

# Save the sorted attributes to a file
output_file = 'utils/cub_attribute_presence_ratios.txt'
with open(output_file, 'w') as file:
    for attribute_id, (attribute_name, ratio) in sorted_attributes:
        file.write(f"Attribute ID: {attribute_id}, Name: {attribute_name}, Presence Ratio: {ratio:.2%}\n")

print(f"Results saved to {output_file}")
